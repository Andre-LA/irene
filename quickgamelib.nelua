require 'math'

require 'sdl2'
require 'sdl2_image'

require 'gamemath'
require 'quicktypes'

global QuickGame = @record{}

global QuickGame.PALLETE:record{
  WHITE: QuickTypes.Color,
  RED: QuickTypes.Color,
  GREEN: QuickTypes.Color,
  BLUE: QuickTypes.Color,
  BG: QuickTypes.Color,
} = {
  { 0xff, 0xff, 0xff, 0xff },
  { 0xff, 0x00, 0x00, 0xff },
  { 0x00, 0xff, 0x00, 0xff },
  { 0x00, 0x00, 0xff, 0xff },
  {  94, 83, 51, 0xff }
}

-- instead of a internal state, the state is
-- exported and should be used externally.
global QuickGame.CoreState = @record{
  initialized: boolean,
  quit: boolean,
  window: *SDL_Window,
  renderer: *SDL_Renderer,
}

local CoreState = QuickGame.CoreState

-- try to initialize and return a new initilized
-- core state.
-- returns:
--   * a boolean that indicates true on success
--   * a string error message on failure (or empty otherwise)
--   * a new state, only filled on success
-- notes:
--   You always should first check if the initialization
--   succeeded before trying to use the state
function QuickGame.init(
  title: stringview,
  pos_x: integer, pos_y: integer,
  size_x: integer, size_y: integer,
  flags: uint32
): (boolean, stringview, QuickGame.CoreState)

  local sdl_init_result = SDL_Init(SDL_INIT_VIDEO)
  if sdl_init_result < 0 then
    return false, SDL_GetError(), (@QuickGame.CoreState){}
  end

  local window = SDL_CreateWindow(title, pos_x, pos_y, size_x, size_y, flags)
  if window == nilptr then
    return false, SDL_GetError(), (@QuickGame.CoreState){}
  end

  local renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED)
  if renderer == nilptr then
    return false, SDL_GetError(), (@QuickGame.CoreState){}
  end

  SDL_SetRenderDrawColor(renderer, 0xff, 0xff, 0xff, 0xff)

  local new_state: QuickGame.CoreState = {
    initialized = true,
    quit = false,
    =window,
    =renderer,
  }

  return true, "", new_state
end

function CoreState:terminate()
  check(self.initialized, 'Core State variable is not initialized')

  self.initialized = false
  SDL_DestroyRenderer(self.renderer)
  SDL_DestroyWindow(self.window)
end

function CoreState:pool_events(evt_callbacks: record{
  on_quit_event: function(quit_evt: SDL_QuitEvent),
  on_key_event: function(key_evt: SDL_KeyboardEvent, is_down: boolean),
  on_mousemotion_event: function(mousemotion_evt: SDL_MouseMotionEvent)
})
  check(self.initialized, 'Core State variable is not initialized')

  local evt: SDL_Event;

  while SDL_PollEvent(&evt) == 1 do
    if evt.type == SDL_QUIT then
      self.quit = true

      if evt_callbacks.on_quit_event ~= nilptr then
        evt_callbacks.on_quit_event(evt.quit)
      end
    elseif evt.type == SDL_KEYDOWN then
      if evt_callbacks.on_key_event ~= nilptr then
        evt_callbacks.on_key_event(evt.key, true)
      end
    elseif evt.type == SDL_KEYUP then
      if evt_callbacks.on_key_event ~= nilptr then
        evt_callbacks.on_key_event(evt.key, false)
      end
    elseif evt.type == SDL_MOUSEMOTION then
      if evt_callbacks.on_mousemotion_event ~= nilptr then
        evt_callbacks.on_mousemotion_event(evt.motion)
      end
    end
  end
end

function CoreState:render_clear(color: QuickTypes.Color)
  check(self.initialized, 'Core State variable is not initialized')

  SDL_SetRenderDrawColor(self.renderer, color.r, color.g, color.b, color.a)
  SDL_RenderClear(self.renderer)
end

function CoreState:render_draw_rect(rect: GameMath.Rect, filled: boolean, color: QuickTypes.Color)
  check(self.initialized, 'Core State variable is not initialized')

  local sdl_rect: SDL_Rect = {
    x = rect.x, y = rect.y,
    w = rect.w, h = rect.h
  }

  SDL_SetRenderDrawColor(self.renderer, color.r, color.g, color.b, color.a)

  if filled then
    SDL_RenderFillRect(self.renderer, sdl_rect)
  else
    SDL_RenderDrawRect(self.renderer, sdl_rect)
  end
end

function CoreState:render_present()
  check(self.initialized, 'Core State variable is not initialized')

  SDL_RenderPresent(self.renderer)
end
