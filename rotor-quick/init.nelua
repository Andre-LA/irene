require 'vector'
require 'rotor'

## local masks_count = 0

global RotorQuick = @record{}
global RotorQuick.masks: record{} = {};
global RotorQuick.storages: record{} = {};

-- TODO: unglobalize all RQ_* functions
## local function RQ_GetMetaField(T, metafield) return T.value.metafields[metafield] end

## RQ_add_mask_and_storage = hygienize(function(compname, T)
  -- [[ types [[
  local masks = @#[RQ_GetMetaField(RotorQuick, 'masks').type]#
  local storages = @#[RQ_GetMetaField(RotorQuick, 'storages').type]#
  local T = @#[T]#
  local storageT = @Storage(T)
  -- ]] types ]]

  -- [[ update types [[
  ## masks.value:add_field(compname, BitsetArray.value)
  ## storages.value:add_field(compname, storageT.value)
  -- ]] update types ]]

  -- [[ fill fields [[
  RotorQuick.masks.#|compname|# = bitset_array.lshift(BITSETARRAY_OF_ONE, #[masks_count]#)
  RotorQuick.storages.#|compname|# = storageT.new()

  global T.mask = RotorQuick.masks.#|compname|#
  global T.storage = &RotorQuick.storages.#|compname|#

  ## masks_count = masks_count + 1
  -- ]] fill fields ]]
## end)

## RQ_add_mask_and_storage('entity', Entity)

require 'rotor-quick.components'
require 'rotor-quick.systems'
