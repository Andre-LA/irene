require 'span'
require 'math'
require 'raylib'
require 'rotor'
require 'rotor-quick.makers'

global RotorQuick.Components.Intersectable = @record{
  local_rect: Rectangle,
  global_rect: Rectangle,
  entity_id: GenerationalIndex,
}

local Intersectable = RotorQuick.Components.Intersectable
## is_component(Intersectable)

function Intersectable.get_local_rect(vertices: *span(Vector2)): Rectangle
  local min_x, min_y, max_x, max_y = 0.0, 0.0, 0.0, 0.0

  for i = 0, < #vertices do
    min_x = math.min(vertices[i].x, min_x)
    max_x = math.max(vertices[i].x, max_x)

    min_y = math.min(vertices[i].y, min_y)
    max_y = math.max(vertices[i].y, max_y)
  end

  return (@Rectangle){
    min_x, min_y,
    max_x, max_y
  }
end

function Intersectable.get_global_rect(rect: Rectangle, pos: Vector2): Rectangle
  rect.x = rect.x + pos.x
  rect.y = rect.y + pos.y
  return rect
end

function Intersectable:set_local_rect(vertices: *span(Vector2))
  self.local_rect = Intersectable.get_local_rect(vertices)
end

function Intersectable:set_global_rect(pos: Vector2)
  self.global_rect = Intersectable.get_global_rect(self.local_rect, pos)
end

function Intersectable:set_rects(pos: Vector2, vertices: *span(Vector2))
  self:set_local_rect(vertices)
  self:set_global_rect(pos)
end

function Intersectable:is_intersecting(other_intersectable: *Intersectable): boolean
  return Raylib.CheckCollisionRecs(self.global_rect, other_intersectable.global_rect)
end

function Intersectable:get_intersection(other_intersectable: *Intersectable): Rectangle
  return Raylib.GetCollisionRec(self.global_rect, other_intersectable.global_rect)
end

function Intersectable:init(entity_id: GenerationalIndex, pos: Vector2, vertices: *span(Vector2))
  self.entity_id = entity_id
  self:set_rects(pos, vertices)
end
