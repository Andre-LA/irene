require 'math'
require 'vector'
require 'rotor.optional'
require 'rotor-quick.makers'

global RotorQuick.Components.SceneGraphNode = @record{
  entity_id: GenerationalIndex,
  self_id: GenerationalIndex,
  parent_id: GenerationalIndex,
  children_ids: vector(GenerationalIndex), -- points to other SceneGraphNode ids
}

local SceneGraphNode = RotorQuick.Components.SceneGraphNode
## is_component(SceneGraphNode)

local function find_child_index(node: *SceneGraphNode, child_node_id: GenerationalIndex): optional(usize)
  local result: optional(usize) = {}

  for i = 0, < #node.children_ids do
    if node.children_ids[i] == child_node_id then
      result:set(i)
      break
    end
  end

  return result
end

function SceneGraphNode:init(entity_id: GenerationalIndex, self_id: GenerationalIndex)
  self.entity_id = entity_id
  self.self_id = self_id
end

-- TODO: auto-declare this with a future @MakeComponent generic
function SceneGraphNode.get_entry_from_id(id: GenerationalIndex): optional(*SceneGraphNode)
  return RotorQuick.storages.scene_graph_node:get_entry(id)
end

function SceneGraphNode:iter_children(): (
  function(state: *vector(GenerationalIndex), ctrl_var: isize): (boolean, isize, *SceneGraphNode, GenerationalIndex), -- state: the children_ids; ctrl_var: child_index
  *vector(GenerationalIndex),
  isize
)
  local function iterator(state: *vector(GenerationalIndex), ctrl_var: isize): (boolean, isize, *SceneGraphNode, GenerationalIndex)
    local can_iter: boolean, child_node: *SceneGraphNode, child_node_id: GenerationalIndex = false, nilptr, {0,0}

    while ctrl_var < #state do
      ctrl_var = ctrl_var + 1

      if ctrl_var < #state then
        child_node_id = state[ctrl_var]
        local child_node_opt = SceneGraphNode.get_entry_from_id(child_node_id)

        if child_node_opt.filled then
          can_iter, child_node = true, child_node_opt:get()
          break
        end
      else
        can_iter, ctrl_var, child_node, child_node_id = false, 0, nilptr, {0,0}
        break
      end
    end

    return can_iter, ctrl_var, child_node, child_node_id
  end

  return iterator, self.children_ids, -1
end

function SceneGraphNode:attach_child(child_node_id: GenerationalIndex)
  local sg_node_opt = SceneGraphNode.get_entry_from_id(child_node_id)
  check(sg_node_opt.filled, "trying to attach a child that doesn't exists")

  if sg_node_opt.filled then
    local is_already_child = find_child_index(self, child_node_id)
    check(not is_already_child.filled, "trying to attach a child that is already a child")

    self.children_ids:push(child_node_id)

    for i, child_node in self:iter_children() do
      child_node.parent_id = self.self_id
    end
  end
end

function SceneGraphNode:detach_child(child_node_id: GenerationalIndex)
  local child_index_opt = find_child_index(self, child_node_id)
  check(child_index_opt.filled, 'trying to detach a child that is not attached')

  if child_index_opt.filled then
    local child_index = child_index_opt:get()
    self.children_ids:remove(child_index)

    for i, child_node in self:iter_children() do
      child_node.parent_id = {0,0}
    end
  end
end

function SceneGraphNode:get_traversal(nodes: *vector(GenerationalIndex), children_first: facultative(boolean) <comptime>)
  ## local _children_first = not children_first.type.is_niltype and children_first.value

  ## if not _children_first then
    nodes:push(self.self_id)
  ## end

  for i, child_node, child_node_id in self:iter_children() do
    nodes:push(child_node_id)
  end

  ## if _children_first then
    nodes:push(self.self_id)
  ## end
end
