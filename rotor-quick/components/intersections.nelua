require 'vector'
require 'raylib'
require 'rotor'
require 'rotor-quick.components.intersectable'
require 'rotor-quick.makers'

local Intersectable = RotorQuick.Components.Intersectable

local Intersection = @record{
  rect: Rectangle,
  entity_id: GenerationalIndex,
  cycles_live: uinteger
}

local Intersections = @record{
  intersections: vector(Intersection),
  on_enter_callback: function(self_intersectable: *Intersectable, self_intersections: *Intersections, other_intersectable: *Intersectable),
  on_exit_callback: function(self_intersectable: *Intersectable, self_intersections: *Intersections, other_intersectable: *Intersectable)
}

## is_component(Intersections)

global RotorQuick.Components.Intersections = Intersections
global RotorQuick.Components.Intersections.Intersection = @Intersection

function Intersections:update_no_intersection(entity_id: GenerationalIndex): boolean
  for i = 0, < #self.intersections do
    local intersection_i: *Intersection = self.intersections[i]

    if intersection_i.entity_id == entity_id then
      self.intersections:remove(i)
      return true
    end
  end

  return false
end

function Intersections:update_intersection(intersection: Rectangle, entity_id: GenerationalIndex): boolean
  for i = 0, < #self.intersections do
    local intersection_i: *Intersection = self.intersections[i]

    if intersection_i.entity_id == entity_id then
      intersection_i.rect = intersection
      intersection_i.cycles_live = intersection_i.cycles_live + 1
      return true
    end
  end

  self.intersections:push({
    rect = intersection,
    entity_id = entity_id,
    cycles_live = 0
  })

  return false
end
