## local tabler = require 'nelua.utils.tabler'
## local metalib = require 'rotor-quick.metalib'

require 'rotor-quick'

## if PROF then
  require 'nprof'
  global nprof: NProf = {}
## end

##[[
  local function is_record(_type)
    return metalib.basic_typecheck(_type, 'record', function(value)
      if _type and _type.value and traits.is_type(_type.value) and _type.value.is_record then
        return true
      else
        tostring(_type)
      end
    end)
  end

  local function gen_errmsg(comp_type, err_msg)
    local comp_name = comp_type.name, metalib.pascalcase_to_snakecase(comp_type.name)
    return string.format(
      'assertion error with type %s: %s. Maybe you forgot to use ## is_component(%s)?',
      comp_name,
      err_msg,
      comp_name
    )
  end

  local function assert_type_is_component(comp_type)
    staticassert(is_record(comp_type))

    local c_type, err_msg = metalib.basic_typecheck(comp_type.value, "record with 'is_component' trait", function(value)
      local is_type = traits.is_type(value)
      local is_record = is_type and value.is_record
      local is_component = is_record and value.is_component

      if is_component then
        return true
      elseif is_record then
        return "record without 'is_component' trait"
      else
        return tostring(value)
      end
    end)

    staticassert(c_type, gen_errmsg(comp_type, err_msg)) -- does assertion failure when ## is_component wasn't used

    return comp_type
  end
]]

-- [[ mark record as component [[

--##[[
--  local masks_count = 0
--
--  is_component = hygienize(function(T)
--    staticassert(is_record(T))
--    T.value.is_component = true
--    RQ_add_mask_and_storage(metalib.pascalcase_to_snakecase(T.name), T)
--  end)
--]]

-- this macro auto-implements the is_component trait
## function impl_is_component(R)
  -- ensure that a record is passed
  ## staticassert(is_record(R))

  -- mark the is_component trait
  ## local R_snakecased_name = metalib.pascalcase_to_snakecase(R.name)

  ## R.value.is_component = true
  ## R.value.component_metainfo = {snakecase_name = R_snakecased_name}

  -- macro do add the mask and the storage of this component
  ## RQ_add_mask_and_storage(R_snakecased_name, R)

  local R: type = #[R]#

  ## if not R.value.metafields.get_entry_from_id then
  function R.get_entry_from_id(id: GenerationalIndex): optional(*R)
    return RotorQuick.storages.#|R_snakecased_name|#:get_entry(id)
  end
  ## end

  ## if not R.value.metafields.get_entry_from_entity_id then
  function R.get_entry_from_entity_id(id: GenerationalIndex): optional(*R)
    local result: optional(*R) = {}

    local entity_opt = RotorQuick.storages.entity:get_entry(id)

    if entity_opt.filled then
      local entity = entity_opt:get()
      local r_storage_index_opt = entity:get_storage_index(RotorQuick.masks.#|R_snakecased_name|#)
      if r_storage_index_opt.filled then
        local r_storage_index = r_storage_index_opt:get()

        local entity_r_id = entity.associated_components[r_storage_index]

        local entity_r_opt = R.get_entry_from_id(entity_r_id)
        if entity_r_opt.filled then
          result:set(entity_r_opt:get())
        end
      end
    end

    return result
  end
  ## end
## end

-- temporary alias
## is_component = impl_is_component

-- ]] mark record as component ]]

-- [[ Entity maker [[
## local n = {'st', 'nd', 'rd'}

## local make_entity = generalize(function(entity_name, ...)
  ##[[
    -- TODO: also should asserts if the first character is a number
    staticassert(not string.find(entity_name, '[^_%w]'), 'entity name must contains only alphanumeric and/or underscores')

    local entity_shape = {...}
    local components, children = {}, {}

    local entity_subnickname = table.concat(
      tabler.imap(entity_shape, function(v) return v.nickname end),
      ', '
    )
  ]]

  local EntityT <nickname #['entity('..entity_subnickname..')']#, codename #['rotor_quick_'..entity_name]#> = @record{
    entity_id: GenerationalIndex,
    -- more added below
  }

  ## EntityT.value.is_entity = true
  ## EntityT.value.entity_metainfo = {name = entity_name}

  local EntityInitValues = @record{
    -- more added below
  }

  ##[[
    -- collect entities and components
    for i = 1, #entity_shape do
      -- ensures that there are only components or entities in entity_shape
      local msg_nth = 'error on '..(i < 4 and i..n[i] or i..'th')..'parameter: '
      staticassert(entity_shape[i].is_component or entity_shape[i].is_entity, msg_nth..'is neither component or entity')

      if entity_shape[i].is_component then
        table.insert(components, entity_shape[i])
      elseif entity_shape[i].is_entity then
        table.insert(children, entity_shape[i])
      end
    end
  ]]

  -- add fields and functions to EntityT for each component
  -- it also configures EntityInitValues
  ## for i, comp in ipairs(components) do
    ## local comp_scname = comp.component_metainfo.snakecase_name

    -- add the corresponding id field
    ## EntityT.value:add_field(comp_scname..'_id', GenerationalIndex.value)

    -- add the init
    ## EntityInitValues.value:add_field(comp_scname, comp)

    -- add EntityT:get_"component" method
    function EntityT:#|'get_'..comp_scname|#(): pointer(#[comp]#)
      local possible_result = RotorQuick.storages.#|comp_scname|#:get_entry(self.#|comp_scname..'_id'|#)

      check(
        possible_result.filled,
        #[EntityT.value.nickname..':get_'..comp_scname..': '..comp_scname..' is not associated with entity']#
      )

      return possible_result:get()
    end
  ## end

  -- add fields and functions to EntityT for each child entity
  -- add the child type to EntityInitValues
  ## for i, child in ipairs(children) do
    ## local child_name = child.entity_metainfo.name
    ## EntityT.value:add_field(child_name, child)

    local ChildType: type = #[EntityT.value.fields[child_name].type]#
    ## EntityInitValues.value:add_field(child_name, ChildType.value)
  ## end

  function EntityT.new(initial_values: EntityInitValues): (EntityT, *Entity)
    local result: EntityT = {}

    local entity_id, entity = RotorQuick.storages.entity:new_entry(Entity.new())
    result.entity_id = entity_id

    -- create and associate each component
    ## for i, comp in ipairs(components) do
      ## local comp_scname = comp.component_metainfo.snakecase_name

      ## local c_id = comp_scname..'_id'

      local #|c_id|#, #|comp_scname|# = RotorQuick.storages.#|comp_scname|#:new_entry(initial_values.#|comp_scname|#)
      entity:associate(#|c_id|#, RotorQuick.masks.#|comp_scname|#)

      result.#|c_id|# = #|c_id|#
    ## end

    -- children are already created, so it should be just copied
    ## for i, child in ipairs(children) do
      ## local child_name = child.entity_metainfo.name
      result.#|child_name|# = initial_values.#|child_name|#
    ## end

    return result, entity
  end

  ## return EntityT
## end)

global MakeEntity = #[make_entity]#

-- ]] Entity maker ]]

-- [[ system maker [[
global System = @record{
  read: vector(BitsetArray),
  write: vector(BitsetArray),
  system_data: SystemData,
}

## local make_system = generalize(function(T, use_before, use_run, use_after, read_count, run_T)
  ##[[
    staticassert(traits.is_type(T), "invalid type %s", T)

    local component_names = {}
    local component_types = {}

    for _, field in ipairs(run_T.fields) do
      local ftype = field.type
      staticassert(traits.is_type(ftype) and ftype.is_component, 'type %s is not a component!', ftype)

      table.insert(component_names, field.name)
      table.insert(component_types, ftype)
    end

    local read_names = table.move(component_names, 1, read_count, 1, {})
    local read_types = table.move(component_types, 1, read_count, 1, {})

    local write_names = table.move(component_names, read_count+1, #component_names, 1, {})
    local write_types = table.move(component_types, read_count+1, #component_names, 1, {})
  ]]

  local T = @#[T]#

  local optCollectionT = @record{}

  ## for i, name in ipairs(component_names) do
    local opt_T = @optional(*#[ component_types[i] ]#)
    ## optCollectionT.value:add_field(name, opt_T.value)

    local stor_T = @pointer(Storage( #[ component_types[i] ]# ))
  ## end

  local systemT <nickname #[string.format('system(%s)', T)]#> = @record{
    system: System,
    opts: optCollectionT,
    runner: T,
  }

  ## systemT.value.subtype = T

  function systemT.new(): systemT
    local new_system: systemT = {}

    new_system.system.read:reserve(#[#read_names]#)
    new_system.system.write:reserve(#[#read_names]#)

    ## for i, name in ipairs(read_names) do
      new_system.system.read:push(bitset_array.copy(RotorQuick.masks.#|name|#))
    ## end

    ## for i, name in ipairs(write_names) do
      new_system.system.write:push(bitset_array.copy(RotorQuick.masks.#|name|#))
    ## end

    new_system.system.system_data = SystemData.new(new_system.system.read, new_system.system.write)
    return new_system
  end

  function systemT:verify(): boolean
    local values: array(boolean, #[ #component_names]#) = {}
    local result: boolean = true

    ## for i, name in ipairs(component_names) do
      values[#[i-1]#] = self.opts.#|name|#.filled
    ## end

    for i = 0, < #[#component_names]# do
      result = result and values[i]
    end

    return result
  end

  function systemT:run()
    ## if PROF then
      nprof:push(#[systemT.value.nickname]#)
      defer nprof:pop() end
    ## end

    local runner: *T = self.runner

    ## if use_before then
      runner:before_all(self.system.system_data)
    ## end

    ## if use_run then
      local system_data: *SystemData = self.system.system_data

      for i = 0, < #system_data.components_indexes do
        local ids = system_data.components_indexes[i]

        if #ids > 0 then
          ## for i, name in ipairs(component_names) do
            ## local name_id = name..'_id'
            local #|name_id|# = ids[#[i-1]#]
            self.opts.#|name|# = RotorQuick.storages.#|name|#:get_entry(#|name_id|#)
          ## end

          if self:verify() then
             ## for _, name in ipairs(component_names) do
               local #|name|# = self.opts.#|name|#:get()
             ## end

            ##[[
              local ids = metalib.create_id_nodes(aster, component_names)

              table.insert(ids, aster.Id{'system_data'})
              table.insert(ids, 1, aster.Id{'runner'})

              inject_astnode(metalib.create_call_node(aster, T, 'run', table.unpack(ids)))
            ]]
          else
            self.system.system_data:mark_available(i)
          end
        end
      end
    ## end

    ## if use_after then
      runner:after_all(self.system.system_data)
    ## end
  end

  function systemT:update(entity: *Entity)
    self.system.system_data:update(entity)
  end

  ## return systemT
## end)

global MakeSystem = #[make_system]#

-- ]] system maker ]]
