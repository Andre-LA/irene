require 'rotor-quick.makers'
require 'rotor-quick.components.position'
require 'rotor-quick.components.scene_graph_node'

local Position = RotorQuick.Components.Position
local SceneGraphNode = RotorQuick.Components.SceneGraphNode

-- TODO: optimize with is_dirty flag
local function traverse(origin_sg_node: *SceneGraphNode, origin_pos: *Position)
  for i, child_node, child_node_id in origin_sg_node:iter_children() do
    local child_pos_opt = Position.get_entry_from_entity_id(child_node.entity_id)
    if child_pos_opt.filled then
      local child_pos = child_pos_opt:get()

      child_pos.origin_position = origin_pos:get_global_position()

      if #child_node.children_ids > 0 then
        traverse(child_node, child_pos)
      end
    end
  end
end

global RotorQuick.Systems.PositionHierarchy = @MakeSystem('PositionHierarchy', @record{
  scene_graph_node: SceneGraphNode,
  position: Position
})

local PositionHierarchy = RotorQuick.Systems.PositionHierarchy

function PositionHierarchy:run()
  ## if PROF then
    nprof:push(#[PositionHierarchy.value.nickname]#)
    defer nprof:pop() end
  ## end

  for _, components in self:iterate_components() do
    local scene_graph_node: *SceneGraphNode = components.scene_graph_node
    local position: *Position = components.position

    if scene_graph_node.parent_id == {0,0} then
      traverse(scene_graph_node, position)
    end
  end
end
