require 'math'
require 'gamemath'
require 'nene'
require 'rotor'
require 'rotor-quick.makers'
require 'rotor-quick.components.position'
require 'rotor-quick.components.shape'
require 'rotor-quick.components.painter'

local RQ_Comps = RotorQuick.Components

global RotorQuick.Systems.ShapePainter = @MakeSystem('ShapePainter', @record{
  position: RQ_Comps.Position,
  shape: RQ_Comps.Shape,
  painter: RQ_Comps.Painter
})

function RotorQuick.Systems.ShapePainter:run(core_state: *Nene.CoreState)
  ## if PROF then
    nprof:push(#[ShapePainter.value.nickname]#)
    defer nprof:pop() end
  ## end

  for _, components in self:iterate_components() do
    local position = components.position
    local shape = components.shape
    local painter = components.painter

    if not painter.active then
      return
    end

    local size_x, size_y = 0.0, 0.0

    for i = 0, < #shape.vertices do
      size_x = math.max(shape.vertices[i].x, size_x)
      size_y = math.max(shape.vertices[i].y, size_y)
    end

    local global_pos = position:get_global_position()

    local ShapeCategory = RQ_Comps.Shape.ShapeCategory

    switch shape.category
    case ShapeCategory.Rectangle then
      local rectf: GameMath.Rectf = { global_pos.x, global_pos.y, size_x, size_y }
      core_state:render_draw_rect(rectf:to_rect(), painter.use_lines, painter.color)

    case ShapeCategory.Circle then
      --tico.graphics_fill_circle(
      --  math.ifloor(global_pos.x),
      --  math.ifloor(global_pos.y),
      --  math.max(size_x, size_y) / 2,
      --  painter.color
      --)

    case ShapeCategory.Triangle then
      local p1, p2, p3 = shape.vertices[0], shape.vertices[1], shape.vertices[2]
      --tico.graphics_fill_triangle(
      --  math.ifloor(global_pos.x + p1.x),
      --  math.ifloor(global_pos.y + p1.y),
--
      --  math.ifloor(global_pos.x + p2.x),
      --  math.ifloor(global_pos.y + p2.y),
--
      --  math.ifloor(global_pos.x + p3.x),
      --  math.ifloor(global_pos.y + p3.y),
--
      --  painter.color
      --)

    case ShapeCategory.Polygon then
      for i = 0, < #shape.vertices - 1 do
        --tico.graphics_draw_line(
        --  math.ifloor(global_pos.x + shape.vertices[i].x),
        --  math.ifloor(global_pos.y + shape.vertices[i].y),
--
        --  math.ifloor(global_pos.x + shape.vertices[i+1].x),
        --  math.ifloor(global_pos.y + shape.vertices[i+1].y),
--
        --  painter.color
        --)
      end
    end
  end
end

