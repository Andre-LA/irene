require 'math'
require 'raylib'
require 'rotor'
require 'rotor-quick.makers'
require 'rotor-quick.components.intersections'
require 'rotor-quick.components.painter'

local Position = RotorQuick.Components.Position
local Sprite = RotorQuick.Components.Sprite
local Painter = RotorQuick.Components.Painter

local EachRunIds = @record{
  position_id: GenerationalIndex,
  painter_id: GenerationalIndex,
  sprite_id: GenerationalIndex,
}

local function paint(position: *Position, painter: *Painter, sprite: *Sprite)
  if not painter.active then
    return
  end

  local img_unit_w: integer = math.ifloor(sprite.sprite_sheet.width / sprite.frame_rect.width)
  local img_unit_h: integer = math.ifloor(sprite.sprite_sheet.height / sprite.frame_rect.height)

  sprite.frame_rect.x = (sprite.frame_index % img_unit_w) * sprite.frame_rect.width
  sprite.frame_rect.y = math.ifloor(sprite.frame_index / img_unit_w) * sprite.frame_rect.height

  Raylib.DrawTextureRec(sprite.sprite_sheet, sprite.frame_rect, position:get_global_position() + sprite.offset, painter.color)
end

global RotorQuick.Systems.SpritePainter = @MakeSystem('SpritePainter', @record{
  position: Position,
  painter: Painter,
  sprite: Sprite
})

local SpritePainter = RotorQuick.Systems.SpritePainter

-- vector of layers, each layer is a vector of the triple of ids to components of each iterated entity
local DrawOrder: type = @vector(vector(EachRunIds))
## SpritePainter.value:add_field('draw_order', DrawOrder.value)

function SpritePainter:run()
  ## if PROF then
    nprof:push(#[SpritePainter.value.nickname]#)
    defer nprof:pop() end
  ## end

  defer
    for i = 0, < #self.draw_order do
      self.draw_order[i]:destroy()
    end
    self.draw_order:destroy()
  end

  -- collect ids of the components to iterate
  for i = 0, < #self.system_data.components_indexes do
    local ids = self.system_data.components_indexes[i]

    if #ids > 0 then
      local position_id = ids[0]
      local painter_id = ids[1]
      local sprite_id = ids[2]

      local position_opt = RotorQuick.storages.position:get_entry(position_id)
      local painter_opt = RotorQuick.storages.painter:get_entry(painter_id)
      local sprite_opt = RotorQuick.storages.sprite:get_entry(sprite_id)

      if position_opt.filled and painter_opt.filled and sprite_opt.filled then
        local sprite: *Sprite = sprite_opt:get()

        if #self.draw_order <= sprite.layer then
          self.draw_order:resize(sprite.layer + 1)
        end

        self.draw_order[sprite.layer]:push({ position_id, painter_id, sprite_id })
      else
        self.system_data:mark_available(i)
      end
    end
  end

  for i = 0, < #self.draw_order do
    local current_layer = self.draw_order[i]

    for j = 0, < #current_layer do
      local position_opt = RotorQuick.storages.position:get_entry(current_layer[j].position_id)
      local painter_opt = RotorQuick.storages.painter:get_entry(current_layer[j].painter_id)
      local sprite_opt = RotorQuick.storages.sprite:get_entry(current_layer[j].sprite_id)

      paint(position_opt:get(), painter_opt:get(), sprite_opt:get())
    end
  end
end

