require 'math'
require 'raylib'
require 'rotor'
require 'rotor-quick.makers'
require 'rotor-quick.components.position'
require 'rotor-quick.components.shape'
require 'rotor-quick.components.painter'

local Velocity = RotorQuick.Components.Velocity
local Position = RotorQuick.Components.Position

global  VelocityApplierRunner = @record{}

function VelocityApplierRunner:run(velocity: *Velocity, position: *Position, system_data: *SystemData)
  if not velocity.active then
    return
  end

  if velocity.velocity_is_limited then
    velocity.final_velocity = Velocity.get_limited_velocity(velocity.final_velocity, velocity.max_velocity)
  end

  -- TODO (discussion): Should Î”t be used? (see: https://github.com/Andre-LA/rotor-quick/issues/1)
  position.position.x = position.position.x + velocity.final_velocity.x
  position.position.y = position.position.y + velocity.final_velocity.y
end

global RotorQuick.Systems.VelocityApplier = @MakeSystem(VelocityApplierRunner, false, true, false, 1, @record{
  velocity: Velocity,
  position: Position,
})
