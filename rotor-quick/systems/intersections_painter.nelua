require 'math'
require 'nene'
require 'rotor-quick.core'
require 'rotor-quick.makers'
require 'rotor-quick.components.intersections'
require 'rotor-quick.components.painter'

local RQ_Comps = RotorQuick.Components

global RotorQuick.Systems.IntersectionsPainter = @MakeSystem('IntersectionsPainter', @record{
  intersections: RQ_Comps.Intersections,
  painter: RQ_Comps.Painter
})

local IntersectionsPainter = RotorQuick.Systems.IntersectionsPainter

function IntersectionsPainter:run(core_state: *Nene.CoreState)
  ## if PROF then
    nprof:push(#[IntersectionsPainter.value.nickname]#)
    defer nprof:pop() end
  ## end

  for _, components in self:iterate_components() do
    local intersections = components.intersections
    local painter = components.painter

    if not painter.active then
      return
    end

    for i = 0, < #intersections.intersections do
      local intersection = intersections.intersections[i]
      local rect_color: Nene.Color = intersection.cycles_live > 0 and Nene.Palette.RED or Nene.Palette.GREEN
      core_state:render_draw_rect(intersection.rect:to_rect(), painter.use_lines, rect_color)
    end
  end

end

