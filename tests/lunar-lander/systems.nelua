--[[
  Copyright (c) 2020-present Andr√© Luiz Alvares

  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at https://mozilla.org/MPL/2.0/.

  SPDX-License-Identifier: MPL-2.0
]]

--[ dependencies ]--
-- nene
local Nene = require 'nene.core'
local Color = require 'nene.color'
local Vec2 = require 'nene.math.vec2'
local Font = require 'nene.font'
local Texture = require 'nene.texture'

-- rotor
local system = require 'rotor.system'

-- irene
local GravitySystem = require 'irene.systems.gravity_system'
local CollisionSystem = require 'irene.systems.collision_system'
local VelocitySystem = require 'irene.systems.velocity_system'
local SpriteAnimation = require 'irene.systems.sprite_animation'
local SpritePainterSystem = require 'irene.systems.sprite_painter_system'
local TilemapPainter = require 'irene.systems.tilemap_painter'
local CameraSystem = require 'irene.systems.camera_system'
local PositionHierarchySystem = require 'irene.systems.position_hierarchy'

local Level = require 'irene.managers.level'

local PixelArtCamera = require 'irene.entities.pixelart_camera'

-- nprof
## if PROF then
local nprof = require 'nprof'
## end

## local function prof(title)
  ## if PROF then
    nprof:push(#[title]#)
    defer nprof:pop() end
  ## end
## end

-- lunar lander
local Lander = require '.entities.lander'
local Surfaces = require '.entities.surfaces'
local Resources = require '.resources'
local GameState = require '.game_state'
local Settings = require '.settings'


--[ Systems ]--
local Systems = @record{
  lander_ctrl_system: system(Lander.System.run),

  gravity_system: system(GravitySystem.run),
  velocity_system: system(VelocitySystem.run),
  sprite_animation: system(SpriteAnimation.run),
  sprite_painter: system(SpritePainterSystem.run),
  collision_context_system: system(CollisionSystem.CollisionContextSystem.run),
  collision_system: system(CollisionSystem.run),
  collision_response_system: system(CollisionSystem.run),
  tilemap_painter: system(TilemapPainter.run),
  camera_system: system(CameraSystem.run),
  position_hierarchy: system(PositionHierarchySystem.run),

  pixelcamera_render_begin: system(PixelArtCamera.System.render_begin),
  pixelcamera_render_end: system(PixelArtCamera.System.render_end),
  pixelcamera_draw_screens: system(PixelArtCamera.System.draw_screens),
}

local instance: Systems

function Systems.instance(): *Systems
  return &instance
end

function Systems:run_layers(level: *Level, sysname: string <comptime>, pre_run: facultative(boolean), post_run: facultative(boolean))
  ## static_assert(Systems.value.fields[sysname.value], "unknown system: '%s'", sysname.value)
  ## prof('run_layer: '..sysname.value)
  
  check(level, "level not passed")
  
  local system = &self.#|sysname.value|#
  
  ## if not pre_run.type.is_niltype then
    if pre_run then
      system.data:pre_run()
    end
  ## end

  for i = 0, < #level.layers do
    system:run(&level.layers[i].map)
  end

  ## if not post_run.type.is_niltype then
    if post_run then
      system.data:post_run()
    end
  ## end
end

function Systems:run(sysname: string <comptime>, pre_run: facultative(boolean), post_run: facultative(boolean))
  ## static_assert(Systems.value.fields[sysname.value], "unknown system: '%s'", sysname.value)
  ## prof('run: ' .. sysname.value)

  local system = &self.#|sysname.value|#

  ## if not pre_run.type.is_niltype then
    if pre_run then
      system.data:pre_run()
    end
  ## end

  system:run(
    &Surfaces.SafeLanding.storage,
    &Surfaces.Floor.storage,
    &Lander.storage
  )

  ## if not post_run.type.is_niltype then
    if post_run then
      system.data:post_run()
    end
  ## end
end

-- game functions --
function Systems:paint_dev_info()
  local nene = Nene.instance()

  local screen_center = Nene.get_screen_center()
  
  Nene.render_draw_line({ x = screen_center.x}, {screen_center.x, Settings.SCREEN_HEIGHT}, Color.yellow)
  Nene.render_draw_line({ y = screen_center.y}, {Settings.SCREEN_WIDTH, screen_center.y}, Color.yellow)

  local fps = 1 / nene.delta_time
  local fps_str <close> = (do
    local fps_num_str <close> = tostring(fps)
    local fps_fps_str = 'FPS: ' .. fps_num_str
    in fps_fps_str
  end)

  local res = Resources.instance()
  local fps_txt = &res.texts.fps_txt
  res.font:update_text(fps_txt, fps_str, Font.TextQuality.Solid, Color.red)
  fps_txt:draw_to_point({}, {8, 8})
end

function Systems:flying_systems()
  ## prof('flying systems')

  self:run('gravity_system')
  self:run('lander_ctrl_system')

  self:run('collision_context_system', true)
  self.collision_system.data:update_context(self.collision_context_system.data)
  self:run('collision_system', nil, true)

  self:run('velocity_system')

  self:run('position_hierarchy')

  self:run('sprite_animation')
end

function Systems:paint_game(level: *Level)
  ## prof('paint game')
  check(level, "level not passed")
  local nene = Nene.instance()
  self:run('camera_system')
  self:run_layers(level, 'tilemap_painter')
  self:run('sprite_painter')
end

function Systems:draw_text(tex_txt: Texture)
  local half_screen: Vec2 = { (Settings.SCREEN_WIDTH // 2), (Settings.SCREEN_HEIGHT // 2) }
  local half_tex_size: Vec2 = { tex_txt.width // 2, tex_txt.height // 2 }

  local draw_pos = half_screen - half_tex_size

  tex_txt:set_color_mod(Color.black)
  tex_txt:draw_to_point({}, draw_pos + Vec2{1, 1})
  tex_txt:set_color_mod(Color.white)
  tex_txt:draw_to_point({}, draw_pos)
end

function Systems:draw_stop_flying_text()
  check(GameState.is_either(GameState.IsCrashed | GameState.IsLanded), 'expected GameState to be either Crashed or Landed')

  if GameState.is(GameState.IsLanded) then
    self:draw_text(Resources.instance().texts.landed_txt)
  else
    self:draw_text(Resources.instance().texts.crashed_txt)
  end
end

function Systems:paint_hud(show_dev_info: boolean)
  ## prof('paint hud')
  
  if GameState.is(GameState.IsPaused) then
    self:draw_text(Resources.instance().texts.paused_txt)
  elseif GameState.is_either(GameState.IsCrashed | GameState.IsLanded) then
    self:draw_stop_flying_text()
  end

  if show_dev_info then
    self:paint_dev_info()
  end
end

function Systems:update()
  ## prof('processing systems')
  local nene = Nene.instance()
  
  if Nene.is_scancode_pressed(SDL_SCANCODE_P) then
    if GameState.is(GameState.IsPaused) then
      GameState.set(GameState.IsRunning)
    elseif GameState.is(GameState.IsRunning) then
      GameState.set(GameState.IsPaused)
    end
  end

  if GameState.is(GameState.IsRunning) then
    self:flying_systems()
  end
end

function Systems:draw(level: *Level)
  ## prof('draw')
  check(level, "level not passed")
  
  local nene = Nene.instance()

  Nene.render_clear()

  self:run('pixelcamera_render_begin')

  self:paint_game(level)

  local show_dev_info = Nene.is_scancode_held(SDL_SCANCODE_I)
  if show_dev_info then
    self.collision_context_system.data:draw_hitboxes()
  end

  nene.render_offset = {}

  self:paint_hud(show_dev_info)

  self:run('pixelcamera_render_end')
  self:run('pixelcamera_draw_screens')
end

return Systems
