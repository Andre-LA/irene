##[[
  TICO = {
    L = '../../tinycoffee/build',
    I = {
      include = "../../tinycoffee/include",
      external = "../../tinycoffee/external"
    },
  }
]]

require 'tico'

local nelua_argc: cint <cimport, nodecl>
local nelua_argv: *[0]cstring <cimport, nodecl>

local config = tico.config_load('project.tico', nelua_argc, nelua_argv)
tico.init(config)

do
  --local proj_test = tico.json_open('project.tico')
  --local proj_field = tico.field_from_json(proj_test, nilptr)

  --print('is proj test null?', proj_field == nilptr)

  --local win = tico.field_get(proj_field, 'window')
  --local win_w = tico.field_get_number(win, 'width')

  --print('win_w', win_w)

  --tico.field_delete(proj_field)
  --tico.json_delete(proj_test)
end

-- for i = 1, 50 do
--   local proj_test = tico.json_open('project.tico')
--   local proj_field = tico.field_from_json(proj_test, nilptr)
--   print('is proj test null?', proj_test == nilptr)
--   tico.field_delete(proj_field)
--   tico.json_delete(proj_test)
--
--   --local x = tico.plugin_get'resources'
--
--   --local res = tico.plugin_resources_get('image', 'lunarlander')
-- end

local music = tico.sound_load('assets/lunar-lander-music.ogg', tico.AUDIO_USAGE.AUDIO_STREAM)
--local music2 = tico.sound_load('assets/lunar-lander-music.ogg', tico.AUDIO_USAGE.AUDIO_STREAM)
--tico.sound_play(music)

while not tico.window_should_close() do
  tico.update()

  tico.begin_draw()
    tico.graphics_clear(tico.BG)

  tico.end_draw()
end

--tico.sound_stop(music)
tico.sound_unload(music)
--tico.sound_unload(music2)

tico.terminate()

