-- TODO:
-- text
-- camera

-- [[ requires and imports [[
require 'math'
require 'nene'

require 'rotor'
require 'rotor-quick'
require 'rotor-quick.makers'

local RQ_Comps = RotorQuick.Components
local RQ_Sys = RotorQuick.Systems

-- ]] requires and imports ]]

-- Main Game records and general variables
local Lander_Start_Position: Nene.Math.Vec2 = {}
local LANDER_MAX_VELOCITY <comptime> = 300

local WINDOW_WIDTH <comptime> = 800
local WINDOW_HEIGHT <comptime> = 624

local SCREEN_WIDTH <comptime> = WINDOW_WIDTH // 4
local SCREEN_HEIGHT <comptime> = WINDOW_HEIGHT // 4

local ok, err_msg, core_state = Nene.init("Lunar lander test",
                                          WINDOW_WIDTH,
                                          WINDOW_HEIGHT,
                                          'nene/resources/monogram_extended.ttf',
                                          16,
                                          SCREEN_WIDTH,
                                          SCREEN_HEIGHT)
assert(ok, err_msg)

local GameLayers = @enum{
  Background = 0,
  Tiles,
  Propulsion,
  Lander
}

-- 001: Lander
-- 010: Collidable
-- 100: is safe zone
local CollisionMasks = @enum{
  Lander = 1, -- 001
  Floor = 2,  -- 010
  Safe = 6,   -- 110
}

-- [[ components [[

local IsSafeLanding = @record{a: byte}
## is_component(IsSafeLanding)

local IsFloor = @record{ a: byte }
## is_component(IsFloor)

local LanderState = @enum {
  Flying = 1,
  Landed,
  Crashed,
}

local LanderController = @record{
  prop_sprite_id: GenerationalIndex,
  prop_anim_pl_id: GenerationalIndex,
  propulsion_force: number,
  state: LanderState
}
## is_component(LanderController)

-- ]] components ]]

-- [[ systems [[

local LanderControllerSystem = @MakeSystem('LanderController', @record{
  lander_controller: LanderController,
  velocity: RQ_Comps.Velocity,
  gravity: RQ_Comps.Gravity,
})

function LanderControllerSystem:run(core_state: *Nene.CoreState)
  for _, components in self:iterate_components() do
    local lander_controller: *LanderController = components.lander_controller
    local velocity: *RQ_Comps.Velocity = components.velocity
    local gravity: *RQ_Comps.Gravity = components.gravity

    local is_right_down, is_up_down, is_left_down = core_state:get_scancode(SDL_Scancode.SDL_SCANCODE_RIGHT),
                                                    core_state:get_scancode(SDL_Scancode.SDL_SCANCODE_UP),
                                                    core_state:get_scancode(SDL_Scancode.SDL_SCANCODE_LEFT)

    local prop_sprite_opt = RQ_Comps.Sprite.get_entry_from_id(lander_controller.prop_sprite_id)
    local prop_anim_pl_opt = RQ_Comps.AnimationPlayer.get_entry_from_id(lander_controller.prop_anim_pl_id)

    assert(prop_sprite_opt.filled, 'prop_sprite_opt is not filled')
    assert(prop_anim_pl_opt.filled, 'prop_anim_pl_opt is not filled')

    if prop_sprite_opt.filled and prop_anim_pl_opt.filled then
      local prop_sprite = prop_sprite_opt:get()
      local prop_anim_pl = prop_anim_pl_opt:get()

      local ok, anim_range = prop_sprite.spritesheet:get_named_animation_range(is_up_down and 'prop_active' or 'prop_inactive')
      assert(ok, 'animation range not found')

      prop_anim_pl:change_animation(prop_sprite, anim_range, core_state:get_ms_time())
    end

    if is_right_down or is_up_down or is_left_down then
      local direction: Nene.Math.Vec2 = {
        x = (do
          if is_right_down then
            return 1
          elseif is_left_down then
            return -1
          else
            return 0
          end
        end),

        y = is_up_down and -1 or 0
      }

      velocity:add_velocity(direction * lander_controller.propulsion_force * core_state.deltatime)
    end
  end
end

-- ]] systems ]]

-- [[ entities [[

local SafeLanding = @MakeEntity('safe_landing',
  RQ_Comps.Position,
  RQ_Comps.Shape,
  RQ_Comps.Painter,
  RQ_Comps.Intersectable
)

local Floor = @MakeEntity('floor',
  RQ_Comps.Position,
  RQ_Comps.Shape,
  RQ_Comps.Painter,
  RQ_Comps.Intersectable
)

local Lander = @MakeEntity('lander',
  RQ_Comps.Position,
  RQ_Comps.SceneGraphNode,
  RQ_Comps.Shape,
  RQ_Comps.Sprite,
  RQ_Comps.Painter,
  RQ_Comps.Velocity,
  RQ_Comps.Gravity,
  RQ_Comps.Intersectable,
  RQ_Comps.Intersections,
  RQ_Comps.Collider,

  LanderController,

  @MakeEntity('lander_propulsion',
    RQ_Comps.Position,
    RQ_Comps.SceneGraphNode,
    RQ_Comps.Sprite,
    RQ_Comps.AnimationPlayer,
    RQ_Comps.Painter
  ),

  @MakeEntity('camera',
    RQ_Comps.Position,
    RQ_Comps.SceneGraphNode,
    RQ_Comps.CameraHolder
  )
)

local LanderPropulsionEntity: type = #[Lander.value.fields.lander_propulsion.type]#
local CameraEntity: type = #[Lander.value.fields.camera.type]#

local LunarMap = @MakeEntity('lunar_map',
  RQ_Comps.Position,
  RQ_Comps.Tilemap,
  RQ_Comps.Painter
)


local BackgroundEntity = @MakeEntity('background_entity',
  RQ_Comps.Position,
  RQ_Comps.Sprite,
  RQ_Comps.Painter
)

-- ]] entities ]]

-- [[ Game State [[
local GameState = @record{
  -- entities
  lander: Lander,
  lunarmaps: record{
    map: LunarMap,
    bgmap: LunarMap,
  },
  -- systems
  systems: record{
    lander_ctrl_system: LanderControllerSystem,
    gravity_applier: RotorQuick.Systems.GravityApplier,
    shape_painter: RotorQuick.Systems.ShapePainter,
    velocity_applier: RotorQuick.Systems.VelocityApplier,
    intersectable_update: RotorQuick.Systems.IntersectableUpdate,
    intersectable_painter: RotorQuick.Systems.IntersectablePainter,
    intersections_detector: RotorQuick.Systems.IntersectionsDetector,
    intersections_painter: RotorQuick.Systems.IntersectionsPainter,
    sprite_painter: RotorQuick.Systems.SpritePainter,
    follower_system: RotorQuick.Systems.FollowerSystem,
    camera_holder_system: RotorQuick.Systems.CameraHolderSystem,
    position_hierarchy: RotorQuick.Systems.PositionHierarchy,
    sprite_animation: RotorQuick.Systems.SpriteAnimation,
    tilemap_painter: RotorQuick.Systems.TilemapPainter,
    collisions: RotorQuick.Systems.Collisions,
  },
  -- useful data
  last_startmusic_time: float32,
  -- resources
  resources: record{
    textures: record{
      sprites: Nene.Texture,
    },
    atlases: record{
      player: Nene.TextureAtlas,
      map: Nene.TextureAtlas,
      bg: Nene.TextureAtlas,
    },
    spritesheets: record{
      player: Nene.SpriteSheet,
    },
    maps: record{
      map: Nene.Tilemap,
      bgmap: Nene.Tilemap,
    },
    audio: record{
      music: Nene.Music,
      sound_effects: record{
        land: Nene.Sound,
        hit: Nene.Sound
      }
    },
  }
}

function GameState:unload()
  self.resources.audio.sound_effects.land:stop_and_free()
  self.resources.audio.sound_effects.hit:stop_and_free()

  core_state:stop_music()
  self.resources.audio.music:free()
end

function GameState:update_systems(entity: *Entity)
  ## for _, sys_value in ipairs(GameState.value.fields.systems.type.fields) do
    self.systems.#|sys_value.name|#.system_data:update(entity)
  ## end
end

function GameState:reset()
  local lander_controller = self.lander:get_component(LanderController)
  lander_controller.state = LanderState.Flying

  local position = self.lander:get_component(RQ_Comps.Position)
  position.local_position = Lander_Start_Position

  local velocity = self.lander:get_component(RQ_Comps.Velocity)
  velocity:reset_velocity()

  local intersectable = self.lander:get_component(RQ_Comps.Intersectable)
  intersectable:set_global_rect(position:get_global_position())
end

local Game_State: GameState = { --[[initialized below]] }

-- Game_State remaining init:
do
  do -- audio
    local ok, errmsg, music = core_state:load_music'tests/lunar-lander/assets/lunar-lander-music.ogg'
    assert(ok, errmsg)
    Game_State.resources.audio.music = music

    local ok, errmsg, land = core_state:load_sound'tests/lunar-lander/assets/land.wav'
    assert(ok, errmsg)
    Game_State.resources.audio.sound_effects.land = land

    local ok, errmsg, hit = core_state:load_sound'tests/lunar-lander/assets/hit.wav'
    assert(ok, errmsg)
    Game_State.resources.audio.sound_effects.hit = hit
  end

  do -- texture sprites
    local ok, err_msg, texture = core_state:load_texture'tests/lunar-lander/assets/figures/sprites.png'
    assert(ok, err_msg)
    Game_State.resources.textures.sprites = texture
  end

  do -- atlases
    Game_State.resources.atlases.player = {
      texture = &Game_State.resources.textures.sprites,
      unit_width = 16,
      unit_height = 16
    }

    Game_State.resources.atlases.map = {
      texture = &Game_State.resources.textures.sprites,
      unit_width = 16,
      unit_height = 16
    }

    Game_State.resources.atlases.bg = {
      texture = &Game_State.resources.textures.sprites,
      unit_width = 32,
      unit_height = 32
    }
  end

  do -- spritesheets
    Game_State.resources.spritesheets.player = {
      atlas = &Game_State.resources.atlases.player,
      animations = {
        {
          name = 'lander_idle', fps = 1,
          from = 9, to = 9,
        }, {
          name = 'prop_active', fps = 12,
          from = 0, to = 1,
        }, {
          name = 'prop_inactive', fps = 1,
          from = 4, to = 4,
        }
      },
    }
  end

  do --maps
    local _map: vector(isize) = {}

    ##[[
      for i_line, line in ipairs{
        'ffffffffffffffffffffffffffffffffffffffffffffffffff',
        'f                                                f',
        'f L                                              f',
        'f                                                f',
        'f                                                f',
        'f                                                f',
        'f               fffffffffffffffffffffffffff      f',
        'f               f                         f      f',
        'f               f                         f      f',
        'fffffffffffffffff                         f      f',
        'f                                         f      f',
        'f                                         f      f',
        'f                              f          f      f',
        'f                              f          f      f',
        'f         fffffff              f          f      f',
        'f         f f   f              f          f      f',
        'f         f f   f              f                 f',
        'f         f f   ffffffffffffffff                 f',
        'f         f f                  f                 f',
        'f         f f                  f                 f',
        'f         f f                  f                 f',
        'f         f f       f          f                 f',
        'f         f f       f          f                 f',
        'f         f f       f          f                 f',
        'f     fffffff     fff          fffffffffffffffffff',
        'f     ff            f                            f',
        'f     f             f                            f',
        'f     f             f                            f',
        'f     f       ffffffffffffffffffffffffff         f',
        'f     f             f                            f',
        'f     f             f                            f',
        'f     f             f                            f',
        'f     f             f                            f',
        'f     fffffff       f       ffffffffffffffffffffff',
        'f                   f                            f',
        'f                   f                            f',
        'f                   f                            f',
        'f                   f                            f',
        'fffffffffffffffffffffffffffffffffsssssssssssffffff'
      } do
        for c = 1, #line do
          local chartile = line:sub(c, c)
          local charframe = -1

          if chartile == 'f' then
            charframe = 5
          elseif chartile == 's' then
            charframe = 6
          end
    ]]
          _map:push(#[charframe]#)

          ## if chartile == 'L' then
            ## local pos_x, pos_y = (c-1) * 16, (i_line - 1) * 16
            Lander_Start_Position = { #[pos_x]# + 2, #[pos_y]# }
          ## end
    ##[[
        end
      end
    ]]

    Game_State.resources.maps.map = {
      atlas = &Game_State.resources.atlases.map,
      width = 50,
      height = 38,
      map = _map,
    }

    Game_State.resources.maps.bgmap = {
      atlas = &Game_State.resources.atlases.bg,
      width = 25,
      height = 19,
      map = {
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
      }
    }
  end

  ## for _, sys_v in ipairs(GameState.value.fields.systems.type.fields) do
    Game_State.systems.#|sys_v.name|# = (@#[sys_v.type]#).new()
  ## end
end

function GameState:create_camera_entity(): CameraEntity
  local camera_entity, camera_entity_entity = CameraEntity.new{
    position         = {},
    scene_graph_node = {},
    camera_holder    = { camera = Nene.Camera.new(), offset = { 8, 8 } }
  }

  self:update_systems(camera_entity_entity)

  return camera_entity
end

function GameState:create_lander_propulsion(): LanderPropulsionEntity
  local lander_propulstion_sprite: RQ_Comps.Sprite = {
    spritesheet = &self.resources.spritesheets.player,
    current_frame = 4,
    offset = { 0, 0 },
    layer = GameLayers.Propulsion,
  }

  local lander_propulsion, lander_propulsion_entity = LanderPropulsionEntity.new{
    position         = {},
    scene_graph_node = {},
    sprite           = lander_propulstion_sprite,
    animation_player = {
      speed = 1,
      looping = true,
    },
    painter          = { color = Nene.Palette.white, active = true }
  }

  local position = lander_propulsion:get_component(RQ_Comps.Position)
  position:set_local_position({ 0, 16 })

  self:update_systems(lander_propulsion_entity)

  return lander_propulsion
end

-- ]] Game State ]]

-- [[ callbacks [[
-- callback when lander intersects other intersectable
local function on_lander_intersect_enter(lander: *Lander, self_intersectable: *RQ_Comps.Intersectable, self_intersections: *RQ_Comps.Intersections, other_intersectable: *RQ_Comps.Intersectable)
  local lander_controller = lander:get_component(LanderController)

  switch other_intersectable.mask
    case CollisionMasks.Safe then
      lander_controller.state = LanderState.Landed
      Game_State.resources.audio.sound_effects.land:play()

    case CollisionMasks.Floor then
      lander_controller.state = LanderState.Crashed
      Game_State.resources.audio.sound_effects.hit:play()
  end
end

-- callback when lander exit the intersection with other intersectable
local function on_lander_intersect_exit(lander: *Lander, self_intersectable: *RQ_Comps.Intersectable, self_intersections: *RQ_Comps.Intersections, other_intersectable: *RQ_Comps.Intersectable)
  if other_intersectable.mask == CollisionMasks.Safe then
    local lander_controller = lander:get_component(LanderController)
    lander_controller.state = LanderState.Flying
  end
end

-- ]] callbacks ]]

-- [[ Game State extensions [[

function GameState:create_lander(pos: Nene.Math.Vec2): Lander
  local gravity_acceleration: number <comptime> = 1.5

  local lander_shape: RQ_Comps.Shape = {
    category = RQ_Comps.Shape.ShapeCategory.Polygon,

    -- create 8 elements with no actual used values, the numbers here are just for code clarity about the indexes
    vertices = { {0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8} }
  }

  local lprop = self:create_lander_propulsion()

  ## local radius = 6
  ## for i = 0, 8 do
    ## local i_rad = i/4 * math.pi
    ## local cos = math.cos(i_rad)
    ## local sin = math.sin(i_rad)

    lander_shape.vertices[ #[i]# ] = { #[cos*radius + radius]# + 3, #[sin*radius + radius]# + 4}
  ## end

  local lander_sprite: RQ_Comps.Sprite = {
    spritesheet = &self.resources.spritesheets.player,
    current_frame = 9,
    offset = { 0, 0 },
    layer = GameLayers.Lander
  }

  local lander, lander_entity = Lander.new{
    position = { local_position = pos },

    scene_graph_node = { },

    shape = lander_shape,

    sprite = lander_sprite,

    painter = {
      active = true,
      use_lines = true,
      color = Nene.Palette.white
    },

    velocity = {
      active = true,
      final_velocity = {0,0},
      max_velocity = LANDER_MAX_VELOCITY,
      velocity_is_limited = true
    },

    gravity = {
      active = true,
      acceleration = gravity_acceleration,
      direction = {0.0, 1.0}
    },

    intersectable = {
      mask = CollisionMasks.Lander
    },

    intersections = {
      intersections = {},
      on_enter_callback = function(self_intersectable: *RQ_Comps.Intersectable, self_intersections: *RQ_Comps.Intersections, other_intersectable: *RQ_Comps.Intersectable)
        on_lander_intersect_enter(Game_State.lander, self_intersectable, self_intersections, other_intersectable)
      end,
      on_exit_callback =  function (self_intersectable: *RQ_Comps.Intersectable, self_intersections: *RQ_Comps.Intersections, other_intersectable: *RQ_Comps.Intersectable)
        on_lander_intersect_exit(Game_State.lander, self_intersectable, self_intersections, other_intersectable)
      end
    },

    collider = {
      mask = CollisionMasks.Floor | CollisionMasks.Safe,
      tolerance = 2,
    },

    lander_controller = {
      prop_sprite_id = {0, 0},
      propulsion_force = gravity_acceleration * 2.5,
      state = LanderState.Flying
    },

    lander_propulsion = lprop,

    camera = self:create_camera_entity()
  }

  local lander_controller = lander:get_component(LanderController)

  lander_controller.prop_sprite_id = lander.lander_propulsion.sprite_id
  lander_controller.prop_anim_pl_id = lander.lander_propulsion.animation_player_id

  lander:get_component(RQ_Comps.Intersectable):init(pos, lander_shape.vertices.data)

  local scene_graph_node = lander:get_component(RQ_Comps.SceneGraphNode)
  scene_graph_node:attach_child(lander.camera.scene_graph_node_id)
  scene_graph_node:attach_child(lander.lander_propulsion.scene_graph_node_id)

  self:update_systems(lander_entity)

  return lander
end

function GameState:create_tilemap(tilemap: *Nene.Tilemap, pos: Nene.Math.Vec2): LunarMap
  local lunarmap, lunarmap_entity = LunarMap.new{
    position = { local_position = pos },

    tilemap = { tilemap = tilemap },

    painter = {
      active = true,
      color = Nene.Palette.white,
      use_lines = true,
    }
  }

  self:update_systems(lunarmap_entity)

  return lunarmap
end

function GameState:create_floor(pos: Nene.Math.Vec2, size: Nene.Math.Vec2): Floor
  local floor_shape: RQ_Comps.Shape = {
    category = RQ_Comps.Shape.ShapeCategory.Rectangle,
    vertices = { {0, 0}, {size.x, 0}, {size.x, size.y}, {0, size.y} }
  }

  local floor, floor_entity = Floor.new{
    position = {local_position = pos},

    shape = floor_shape,

    intersectable = {
      mask = CollisionMasks.Floor,
    },

    painter = {
      active = true,
      use_lines = true,
      color = Nene.Palette.white,
    }
  }

  floor:get_component(RQ_Comps.Intersectable):init(pos, floor_shape.vertices.data)

  self:update_systems(floor_entity)

  return floor
end

function GameState:create_safe_landing(pos: Nene.Math.Vec2, size: Nene.Math.Vec2): SafeLanding
  local safe_shape: RQ_Comps.Shape = {
    category = RQ_Comps.Shape.ShapeCategory.Rectangle,
    vertices = { {0, 0}, {size.x, 0}, {size.x, size.y}, {0, size.y} }
  }

  local safe, safe_entity = SafeLanding.new{
    position = {local_position = pos},

    shape = safe_shape,

    intersectable = {
      mask = CollisionMasks.Safe,
    },

    painter = {
      active = true,
      use_lines = true,
      color = Nene.Palette.white,
    }
  }

  safe:get_component(RQ_Comps.Intersectable):init(pos, safe_shape.vertices.data)

  self:update_systems(safe_entity)

  return safe
end
-- ]] Game State extensions ]]

-- [[ Game Start [[
Game_State.lunarmaps.bgmap = Game_State:create_tilemap(Game_State.resources.maps.bgmap, {0,16})
Game_State.lunarmaps.map = Game_State:create_tilemap(Game_State.resources.maps.map, {0,0})

do
  local map_tilemap = Game_State.lunarmaps.map:get_component(RQ_Comps.Tilemap)

  for i, v in ipairs(map_tilemap.tilemap.map) do
    local tilepos = map_tilemap.tilemap:get_position_from_index(i)

    if v == 5 then
      Game_State:create_floor(tilepos, {16, 16})
    elseif v == 6 then
      Game_State:create_safe_landing(tilepos, {16, 16})
    end
  end
end

Game_State.lander = Game_State:create_lander(Lander_Start_Position)
core_state:play_music(Game_State.resources.audio.music, true)

local landed_txt = Nene.TextTexture.new(core_state, "You Landed!'", Nene.Palette.white)
local crashed_txt = Nene.TextTexture.new(core_state, "You Crashed!", Nene.Palette.white)
local fps_txt = Nene.TextTexture.new(core_state, "00", Nene.Palette.white)

defer
  landed_txt:free()
  crashed_txt:free()
  fps_txt:free()
end

-- ]] Game Start ]]

-- [[ Main Loop [[
while not core_state.quit do
  core_state:pool_events()

  local show_dev_info = core_state:get_scancode(SDL_Scancode.SDL_SCANCODE_I)

  if core_state:get_scancode(SDL_Scancode.SDL_SCANCODE_R) then
    Game_State:reset()
  end

  local lander_controller = Game_State.lander:get_component(LanderController)
  local camera_holder = Game_State.lander.camera:get_component(RQ_Comps.CameraHolder)

  local is_flying = lander_controller.state == LanderState.Flying

  ## if PROF then
    nprof:push'systems' -- [[ nprof systems [[
  ## end

  core_state.camera = camera_holder.camera

  do
    ## if PROF then
      nprof:push'processing systems'
      defer nprof:pop() end
    ## end

    if is_flying then
      ## if PROF then
        nprof:push'is flying systems'
        defer nprof:pop() end
      ## end

      Game_State.systems.gravity_applier:run(core_state.deltatime)
      Game_State.systems.lander_ctrl_system:run(core_state)

      Game_State.systems.intersectable_update:run()
      Game_State.systems.intersections_detector:run()
      Game_State.systems.collisions:run()

      Game_State.systems.velocity_applier:run()

      if show_dev_info then
        Game_State.systems.intersectable_update:run()
      end

      Game_State.systems.position_hierarchy:run()
      Game_State.systems.follower_system:run(core_state.deltatime)
      Game_State.systems.camera_holder_system:run()

      Game_State.systems.sprite_animation:run(core_state:get_ms_time())
    end
  end


  core_state:render_clear(Nene.Palette.black)
  do
    ## if PROF then
      nprof:push'drawing systems' -- [[ nprof drawying systems [[
    ## end

    do
      ## if PROF then
        nprof:push'painting systems'
        defer nprof:pop() end
      ## end

      Game_State.systems.tilemap_painter:run(core_state)
      Game_State.systems.sprite_painter:run(core_state)

      if show_dev_info then
        Game_State.systems.shape_painter:run(core_state)
        Game_State.systems.intersectable_painter:run(core_state)
        Game_State.systems.intersections_painter:run(core_state)
      end
    end

    if not is_flying then
      local half_screen: Nene.Math.Vec2 = {SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2}
      local tex_txt: Nene.TextTexture = lander_controller.state == LanderState.Landed and landed_txt or crashed_txt
      local half_tex_size: Nene.Math.Vec2 = {tex_txt.texture.width // 2, tex_txt.texture.height // 2}
      local draw_pos = half_screen - half_tex_size

      tex_txt:draw(core_state, draw_pos + (@Nene.Math.Vec2){1, 1}, Nene.Palette.black)
      tex_txt:draw(core_state, draw_pos, Nene.Palette.white)
    end


    core_state.camera = {}

    if show_dev_info then
      core_state:render_draw_line({SCREEN_WIDTH // 2, 0}, {SCREEN_WIDTH // 2, SCREEN_HEIGHT}, Nene.Palette.yellow)
      core_state:render_draw_line({0, SCREEN_HEIGHT // 2}, {SCREEN_WIDTH, SCREEN_HEIGHT // 2}, Nene.Palette.yellow)

      local fps = 1 / core_state.deltatime
      local fps_str = (do
        local fps_num_str = tostring(fps)
        local fps_fps_str = 'FPS: ' .. fps_num_str
        fps_num_str:destroy()
        return fps_fps_str
      end)

      fps_txt:update_text(core_state, fps_str, Nene.Palette.white)
      fps_txt:draw(core_state, {8, 8}, Nene.Palette.red)
    end

    core_state:render_screen()

    ## if PROF then
      nprof:pop() -- ]] nprof drawying systems ]]
      nprof:pop() -- ]] nprof systems ]]
      if show_dev_info then
        nprof:draw(core_state)
      end
      nprof:reset()
    ## end
  end

  core_state:render_present()
end
-- ]] Main Loop ]]

Game_State:unload()
core_state:terminate()
