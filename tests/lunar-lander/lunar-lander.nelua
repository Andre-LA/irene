-- Lunar Lander simple game

--[[
  Copyright (c) 2020-present Andr√© Luiz Alvares

  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at https://mozilla.org/MPL/2.0/.

  SPDX-License-Identifier: MPL-2.0
]]

-- nelua
require 'iterators'

-- nene
local Nene = require 'nene.core'

-- nprof
-- NOTE: nprof it's broken broken for now, it'll be fixed later :)
## if PROF then
local nprof = require 'nprof'
## end

## local function prof(title)
  ## if PROF then
    nprof:push(#[title]#)
    defer nprof:pop() end
  ## end
## end

-- main Game records and general variables
local Resources = require '.resources'
local EntityMask = require '.entities.mask'
local Lander = require '.entities.lander'
local Surfaces = require '.entities.surfaces'
local GameState = require '.game_state'
local Systems = require '.systems'
local MainLevel = require '.main_level'
local Settings = require '.settings'

-- game init --
local ok = Nene.init("Lunar lander test", Settings.WINDOW_WIDTH, Settings.WINDOW_HEIGHT)
assert(ok, 'error: nene initialization failed')

MainLevel.init()
defer MainLevel.terminate() end

Resources.load()
defer Resources.unload() end

MainLevel.instance():open()
defer MainLevel.instance():close() end

-- Main Loop --
-- Resources.instance().audio.music:play()

repeat
  Nene.update()

  if Nene.is_scancode_pressed(SDL_SCANCODE_R) then
    MainLevel.instance():close()
    MainLevel.instance():open()
  end

  local systems = Systems.instance()

  systems:update()
  systems:draw(MainLevel.instance())

  ## if PROF then
    nprof:draw()
    nprof:reset()
  ## end

  Nene.render_present()
until Nene.should_quit()
