-- minimal example of a box falling

require 'rotor'

-- is possible to only require the used records by not requiring any init:
-- however it may be better to just require everything once, in this case,
-- check "lunar_lander.nelua" test, it just require "rotor-quick".
require 'rotor-quick.core'
require 'rotor-quick.components.position'
require 'rotor-quick.components.shape'
require 'rotor-quick.components.painter'
require 'rotor-quick.components.velocity'
require 'rotor-quick.components.gravity'
require 'rotor-quick.systems.gravity_applier'
require 'rotor-quick.systems.shape_painter'
require 'rotor-quick.systems.velocity_applier'

local nelua_argc: cint <cimport, nodecl>
local nelua_argv: *[0]cstring <cimport, nodecl>

local Position = RotorQuick.Components.Position
local Shape = RotorQuick.Components.Shape
local Painter = RotorQuick.Components.Painter
local Velocity = RotorQuick.Components.Velocity
local Gravity = RotorQuick.Components.Gravity

local GravityApplier = RotorQuick.Systems.GravityApplier
local ShapePainter = RotorQuick.Systems.ShapePainter
local VelocityApplier = RotorQuick.Systems.VelocityApplier

local gravity_applier = GravityApplier.new()
local shape_painter = ShapePainter.new()
local velocity_applier = VelocityApplier.new()

local SCREEN_WIDTH: integer <comptime> = 800
local SCREEN_HEIGHT: integer <comptime> = 450

local FallingBox = @MakeEntity('falling_box',
  Position,
  Shape,
  Painter,
  Velocity,
  Gravity
)

local falling_box, falling_box_entity = FallingBox.new{
  position = {
    origin_position = {32, 32},
  },
  shape    = {
    category = Shape.ShapeCategory.Rectangle,
    vertices = { {0, 0}, {16, 0}, {16, 16}, {0, 16} }
  },
  painter  = {
    color = QuickGame.PALLETE.WHITE,
    active = true
  },
  velocity = {
    active = true,
    max_velocity = 1,
  },
  gravity  = {
    acceleration = 0.005,
    direction = {0,1},
    active = true
  }
}

gravity_applier.system_data:update(falling_box_entity)
shape_painter.system_data:update(falling_box_entity)
velocity_applier.system_data:update(falling_box_entity)

local ok, err_msg, core_state = QuickGame.init("Basic Gravity test", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 800, 450, SDL_WINDOW_SHOWN)
check(ok, err_msg)

while not core_state.quit do
  core_state:pool_events{
    on_quit_event = nilptr,
    on_key_event = nilptr,
    on_mousemotion_event = nilptr
  }

  gravity_applier:run()
  velocity_applier:run()

  core_state:render_clear(QuickGame.PALLETE.BG)
  do
    shape_painter:run(core_state)
  end
  core_state:render_present()
end

core_state:terminate()
