-- minimal example of a box falling
require 'rotor'
require 'nene'

-- is possible to only require the used records by not requiring any init file,
-- however it may be better to just require everything once, in this case,
-- check "lunar_lander.nelua" test, it just require "irene".
require 'irene.core'
require 'irene.components.position'
require 'irene.components.shape'
require 'irene.components.painter'
require 'irene.components.velocity'
require 'irene.components.gravity'
require 'irene.systems.gravity_applier'
require 'irene.systems.shape_painter'
require 'irene.systems.velocity_applier'

local SCREEN_WIDTH: integer <comptime> = 800
local SCREEN_HEIGHT: integer <comptime> = 450

local FallingBox = @MakeEntity('falling_box',
  Irene.Comps.Position,
  Irene.Comps.Shape,
  Irene.Comps.Painter,
  Irene.Comps.Velocity,
  Irene.Comps.Gravity
)

local function basic_gravity()
  local gravity_applier = Irene.Sys.GravityApplier.new()
  local shape_painter = Irene.Sys.ShapePainter.new()
  local velocity_applier = Irene.Sys.VelocityApplier.new()

  defer
    gravity_applier:destroy()
    shape_painter:destroy()
    velocity_applier:destroy()
  end

  local falling_box, falling_box_entity = FallingBox.new{
    position = {
      origin_position = {32, 32},
    },
    shape    = {
      category = Irene.Comps.Shape.ShapeCategory.Rectangle,
      vertices = { {0, 0}, {16, 0}, {16, 16}, {0, 16} }
    },
    painter  = {
      color = Color.Palette.yellow,
      active = true
    },
    velocity = {
      active = true,
    },
    gravity  = {
      acceleration = 10,
      direction = {0,1},
      active = true
    }
  }

  gravity_applier.system_data:update(falling_box_entity)
  shape_painter.system_data:update(falling_box_entity)
  velocity_applier.system_data:update(falling_box_entity)

  local ok, nene = Nene.init('Irene - Basic gravity', 800, 450)
  assert(ok, 'error: nene initialization failed.')
  defer nene:terminate() end

  repeat
    nene:poll_events()

    gravity_applier:run(nene.delta_time)
    velocity_applier:run()

    nene:render_clear(Color.Palette.bg)

    shape_painter:run(nene)

    nene:render_present()

  until nene.quit
end

basic_gravity()
