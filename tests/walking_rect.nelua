-- minimal example of an walking rectangle --

--[[
  Copyright (c) 2020-present Andr√© Luiz Alvares

  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at https://mozilla.org/MPL/2.0/.

  SPDX-License-Identifier: MPL-2.0
]]

-- nene
local Nene = require 'nene.core'
local Vec2 = require 'nene.math.vec2'
local Color = require 'nene.color'

-- rotor
local entity = require 'rotor.entity'
local component = require 'rotor.component'
local system = require 'rotor.system'
local storage = require 'rotor.storage'
local GenIdx = require 'rotor.gen_idx'

-- irene
local Painter = require 'irene.components.painter'
local Position = require 'irene.components.position'
local TimedCallback = require 'irene.components.timed_callback'
local EntityData = require 'irene.components.entity_data'
local Velocity = require 'irene.components.velocity'
local RectPainter = require 'irene.components.rect_painter'

local TimedCallbackSystem = require 'irene.systems.timed_callback_system'
local VelocitySystem = require 'irene.systems.velocity_system'
local RectPainterSystem = require 'irene.systems.rect_painter_system'

-- walker entity
local WIN_W <comptime>, WIN_H <comptime> = 256, 256

local WalkingDirection = @enum{
  Up = 0, Left, Down, Right
}

function WalkingDirection.to_velocity(self: WalkingDirection): Vec2
  local SPEED <comptime> = 32
  switch self do
  case WalkingDirection.Up    then return Vec2{ 0, -SPEED }
  case WalkingDirection.Down  then return Vec2{ 0,  SPEED }
  case WalkingDirection.Left  then return Vec2{ -SPEED, 0 }
  case WalkingDirection.Right then return Vec2{  SPEED, 0 }
  end
  return Vec2{ 0, 0 }
end

local Walkable <nickname 'Walkable'> = @component(record{
  direction: WalkingDirection
})

function Walkable:next_dir()
  self.direction = (self.direction + 1) % 4
end

local Walker <nickname 'Walker'> = @entity(record{
  position: Position,
  walkable: Walkable,
  entity_data: EntityData,
  timed_callback: TimedCallback,
  velocity: Velocity,
  painter: Painter,
  rect_painter: RectPainter,
})
local Walker.storage: storage(Walker, 1)

function Walker:go_next_dir()
  self.walkable:next_dir()
  self.velocity.final_velocity = self.walkable.direction:to_velocity()
end

function Walker.spawn(): (boolean, GenIdx)
  local ok, id, walker = Walker.storage:push({
    position = {
      local_pos = { (-WIN_W/2) + 2, (-WIN_H/2) + 18 },
    },

    walkable = {
      direction = WalkingDirection.Left, -- will be changed to Down below
    },

    timed_callback = {
      active = true,
      call_interval = 7300,
      callback = function(self: *TimedCallback, id: GenIdx)
        local ok, walker = Walker.storage:mget(id)
        check(ok, 'walker not found on storage')

        if ok then
          walker:go_next_dir()
        end
      end
    },

    velocity = {
      active = true,
    },

    painter = {
      active = true,
    },

    rect_painter = {
      size = { 16, 16 },
      color = Color.yellow,
    },
  })

  assert(ok, 'walker could not be spawned')

  walker.entity_data.id = id
  walker:go_next_dir()

  return ok, id
end

-- systems
local timed_callback_system: system(TimedCallbackSystem.run)
local velocity_system: system(VelocitySystem.run)
local rect_painter_system: system(RectPainterSystem.run)

-- game
local ok = Nene.init('Irene - Basic gravity', WIN_W, WIN_H)
assert(ok, 'error: nene initialization failed.')

Walker.spawn()

repeat
  Nene.update()

  timed_callback_system:run(&Walker.storage)
  velocity_system:run(&Walker.storage)

  Nene.render_clear(Color.bg)

  rect_painter_system:run(&Walker.storage)

  Nene.render_present()
until Nene.should_quit()
