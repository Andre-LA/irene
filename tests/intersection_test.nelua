--[[ This Source Code Form is subject to the terms of the Mozilla Public
     License, v. 2.0. If a copy of the MPL was not distributed with this
     file, You can obtain one at https://mozilla.org/MPL/2.0/. ]]

require 'math'
require 'nene'
require 'vector'

-- is possible to only require the used records by not requiring any init:
require 'irene.core'
require 'irene.components.intersectable'

local Vec2 = @Math.Vec2
local mx: integer, my: integer;

local function intersection_test()
  local quads: vector(Vec2) <close> = {
    { 0,  0},
    {32,  0},
    {32, 32},
    { 0, 32}
  }

  local a: Irene.Comps.Intersectable = {}
  a:init({32,32}, quads.data)

  local b: Irene.Comps.Intersectable = {}
  b:init({100,100}, quads.data)

  -- main:
  local ok, nene = Nene.init("Intersection test", 300, 300)
  assert(ok, 'error: nene initialization failed')
  defer nene:terminate() end

  while not nene.quit do -- main loop
    nene:poll_events({
      motion_cb = function(motion: SDL_MouseMotionEvent)
        mx = motion.x
        my = motion.y
      end
    })

    a:set_global_rect({mx, my})

    local intersection, is_intersecting = a:get_intersection(b)

    nene:render_clear(Color.Palette.bg) -- clear screen with color
    do
      local text = is_intersecting and 'is intersecting' or 'is not intersecting'
      -- TODO: render this text

      nene:render_draw_rect(a.global_rect:to_rect(), false)
      nene:render_draw_rect(b.global_rect:to_rect(), false)

      if is_intersecting then
        nene:render_draw_rect(intersection:to_rect(), false, Color.Palette.green)
      end
    end
    nene:render_present()
  end
end

intersection_test()
