-- Pixel Art Camera entity

--[[
  Copyright (c) 2020-present Andr√© Luiz Alvares

  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at https://mozilla.org/MPL/2.0/.

  SPDX-License-Identifier: MPL-2.0
]]

local Nene = require 'nene.core'
local Color = require 'nene.color'
local Vec2 = require 'nene.math.vec2'
local Rect = require 'nene.math.rect'
local Texture = require 'nene.texture'

local storage = require 'rotor.storage'
local entity = require 'rotor.entity'
local component = require 'rotor.component'
local system = require 'rotor.system'
local GenIdx = require 'rotor.gen_idx'
local Concepts = require 'rotor.concepts'

local Position = require 'irene.components.position'
local Camera = require 'irene.components.camera'

local PixelCamera <nickname 'PixelCamera'> = @component(@record{
  active: boolean,

  screen: Texture,
  clear_color: Color,

  use_destination: boolean,
  draw_destination: Rect,

  flip_h: boolean,
  flip_v: boolean
})

local PixelArtCamera <nickname 'PixelArtCamera'> = @entity(@record{
  position: Position,
  camera: Camera,
  pixel_camera: PixelCamera,
})

local PixelArtCamera.PixelCamera = PixelCamera

function PixelArtCamera.init(pos: Vec2, offset: Vec2, scale: cint, dest: facultative(Rect)): PixelArtCamera
  local screen_size = Camera.get_screen_size(scale)
  local ok, screen = Texture.create_with_access(screen_size.x, screen_size.y, SDL_TEXTUREACCESS_TARGET)
  assert(ok, "Couldn't create screen texture for pixel art camera")

  local camera: PixelArtCamera = {
    position = {
      local_pos = pos,
    },

    camera = {
      =offset,
      half_screen_size = Camera.get_half_screen_point(scale),
    },

    pixel_camera = {
      active = true,
      =screen,

      use_destination = #[not dest.type.is_niltype]#,
    },
  }

  ## if not dest.type.is_niltype then
    camera.pixel_camera.draw_destination = dest
  ## end

  return camera
end

function PixelArtCamera:destroy()
  self.pixel_camera.screen:destroy()
end

function PixelArtCamera.spawn(stor: Concepts.an_storage_ptr, pos: Vec2, offset: Vec2, scale: cint, dest: facultative(Rect)): (boolean, GenIdx, *PixelArtCamera)
  local ok, id, camera = stor:push(PixelArtCamera.init(pos, offset, scale, dest))
  check(ok, "Couldn't push pixel art camera on storage")
  return ok, id, camera
end

local PixelArtCamera.System = @record{}

function PixelArtCamera.System:render_begin(c: record{ position: *Position, pixel_camera: *PixelCamera })
  check(c.position)
  check(c.pixel_camera)

  if not c.pixel_camera.active then
    return
  end
  Nene.set_render_target(c.pixel_camera.screen:get_raw())
  Nene.render_clear(c.pixel_camera.clear_color)
end

function PixelArtCamera.System:render_end(c: record{ position: *Position, pixel_camera: *PixelCamera })
  if not c.pixel_camera.active then
    return
  end

  Nene.set_render_target(nilptr)
end

function PixelArtCamera.System:draw_screens(c: record{ position: *Position, pixel_camera: *PixelCamera })
  if not c.pixel_camera.active then
    return
  end

  local draw_destination: Rect

  if c.pixel_camera.use_destination then
    draw_destination = c.pixel_camera.draw_destination
  end
  
  c.pixel_camera.screen:draw_to_rect_ex(
    {},
    draw_destination,
    0,
    {},
    c.pixel_camera.flip_h,
    c.pixel_camera.flip_v
  )
end

return PixelArtCamera

