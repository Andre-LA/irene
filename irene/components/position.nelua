require 'nene.math'
require 'rotor.optional'
require 'irene.makers'

local Vec2 = @Math.Vec2
local Comps = @Irene.Comps

local Position = @record{
  -- local position relative to parent's position, should be modified through set_local_position method
  local_position: Vec2,

  -- parent's position, should only be modified by a position hierarchy system
  origin_position: Vec2,

  -- TODO: flag for optimization (https://gameprogrammingpatterns.com/dirty-flag.html),
  -- is true when the local_position is modified on the current frame
  -- (this is why you should use set_local_position to change local_position);
  -- is reset to false by the position hierarchy system
  -- is_dirty: boolean,
}
## Irene.impl_is_component(Position)

global Comps.Position = @Position

function Position:get_global_position(): Vec2
  return self.origin_position + self.local_position
end

function Position:set_local_position(pos: Vec2)
  self.local_position = pos
  --self.is_dirty = true
end

function Position:set_local_from_global(global_pos: Vec2)
  self:set_local_position(global_pos - self.origin_position)
end
