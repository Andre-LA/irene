-- Camera component

--[[
  Copyright (c) 2020-present Andr√© Luiz Alvares

  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at https://mozilla.org/MPL/2.0/.

  SPDX-License-Identifier: MPL-2.0
]]

-- nelua
local math = require 'math'

-- nene
local Nene = require 'nene.core'
local Vec2 = require 'nene.math.vec2'
local Vec2i = require 'nene.math.vec2i'

local component = require 'rotor.component'

local Camera <nickname 'Camera'> = @component(@record{
  offset: Vec2,
  half_screen_size: Vec2,
})

function Camera.get_screen_size(scale: number): Vec2
  local win_size = Vec2.from_vec2i(Nene.get_window_size())
  local scalar: number = 1.0 / scale
  return win_size * scalar
end

function Camera.get_half_screen_point(scale_or_size: overload(number, Vec2)): Vec2
  ## if not scale_or_size.type.is_vec2 then
  local scale_or_size = Camera.get_screen_size(scale_or_size)
  ## end
  
  return scale_or_size * 0.5
end

function Camera:set_render_offset(pos: Vec2)
  local nene = Nene.instance()
  local offset = pos + self.offset
  offset.x = -offset.x
  nene.render_offset = offset
end

return Camera
