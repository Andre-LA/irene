require 'nene.math'
require 'irene.makers'

local Vec2 = @Math.Vec2

local Comps = @Irene.Comps
local Position = @Comps.Position

local Target = @record{
  pos_target_id: GenerationalIndex,
}
## Irene.impl_is_component(Target)

global Comps.Target = @Target

function Target:get_target_pos(): (*Position, boolean, string)
  local target_pos_opt = Position.get_entry_from_id(self.pos_target_id)
  if not target_pos_opt.filled then
    return nilptr, false, 'position from pos_target_id not found'
  end

  return target_pos_opt:get(), true, ''
end

function Target.get_direction_from_pos(self_position: Vec2, target_pos: Vec2): Vec2
  local dir = Vec2.normalized(target_pos - self_position)
  return dir
end

function Target:get_direction(self_position: Vec2): (Vec2, boolean, string)
  local target_pos, ok, errmsg = self:get_target_pos()
  if not ok then
    return (@Vec2)(), false, errmsg
  end

  return Target.get_direction_from_pos(self_position, target_pos:get_global_position()), true, ''
end

function Target:get_distance(self_position: Vec2): (number, boolean, string)
  local target_pos, ok, errmsg = self:get_target_pos()
  if not ok then
    return 0, false, errmsg
  end

  local diff = target_pos:get_global_position() - self_position
  return #diff, true, ''
end
