-- Tilemap component

--[[
  Copyright (c) 2020-2022 Andr√© Luiz Alvares

  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at https://mozilla.org/MPL/2.0/.

  SPDX-License-Identifier: MPL-2.0
]]

local Color = require 'nene.color'
local Texture = require 'nene.texture'
local Tilemap = require 'nene.tilemap'
local component = require 'rotor.component'

local TilemapComp <nickname 'TilemapComp'> = @component(@record{
  tileset: Texture,
  tilemap: Tilemap,
  use_tint: boolean,
  tint: Color,
})

## function TilemapComp.value.init_from_map_matrix(self, map_matrix, tile_table)
  -- make self type explicit
  local self: *TilemapComp = #[self]#
  local map_type = @decltype(self.tilemap.map)

  self.tilemap.tilemap_width = #[map_matrix.map_max_width]#

  ##[[
  -- reference: https://nelua.io/overview/#preprocessor-macros-emitting-ast-nodes
  local init_list = aster.InitList{
    pattr = {
      desiredtype = types.ArrayType(map_type.value, map_matrix.rect_tile_count),
    }
  }

  for _, line in ipairs(map_matrix) do
    for i = 1, map_matrix.map_max_width do
      local tile = line[i]
      if tile_table then
        tile = tile_table[ line[i] ] or 0
      end

      table.insert(init_list, aster.value(tile))
    end
  end
  ]]

  self.tilemap.map = #[init_list]#
## end

return TilemapComp
