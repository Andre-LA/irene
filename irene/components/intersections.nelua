require 'vector'
require 'nene.math'
require 'irene.components.intersectable'
require 'irene.makers'

local Vec2, Rectf = @Math.Vec2, @Math.Rectf
local Comps = @Irene.Comps

local Intersectable = @Comps.Intersectable

local Intersection = @record{
  rect: Rectf,
  entity_id: GenerationalIndex,
  cycles_live: uinteger,
  mask: uint32,
}

local Intersections = @record{
  intersections: vector(Intersection),
  on_enter_callback: function(intersection: Rectf, self_intersectable: *Intersectable, self_intersections: *Intersections, other_intersectable: *Intersectable),
  on_exit_callback: function(self_intersectable: *Intersectable, self_intersections: *Intersections, other_intersectable: *Intersectable)
}

## Irene.impl_is_component(Intersections)

global Comps.Intersections = @Intersections
global Comps.Intersections.Intersection = @Intersection

function Intersections:update_no_intersection(entity_id: GenerationalIndex): boolean
  for i = 0, < #self.intersections do
    local intersection_i = &self.intersections[i]

    if intersection_i.entity_id == entity_id then
      self.intersections:remove(i)
      return true
    end
  end

  return false
end

function Intersections:update_intersection(intersection: Rectf, mask: uint32, entity_id: GenerationalIndex): boolean
  for i = 0, < #self.intersections do
    local intersection_i = &self.intersections[i]

    if intersection_i.entity_id == entity_id then
      intersection_i.rect = intersection
      intersection_i.cycles_live = intersection_i.cycles_live + 1
      return true
    end
  end

  self.intersections:push({
    rect = intersection,
    entity_id = entity_id,
    cycles_live = 0,
    mask = mask,
  })

  return false
end

function Intersections:destroy()
  self.intersections:destroy()
end
