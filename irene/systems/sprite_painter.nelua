require 'nene'
require 'math'

require 'irene.makers'
require 'irene.components.position'
require 'irene.components.sprite'
require 'irene.components.painter'

local Comps, Sys = @Irene.Comps, @Irene.Sys

local EachRunIds = @record{
  position_id: GenerationalIndex,
  texture_id: GenerationalIndex,
  painter_id: GenerationalIndex,
  sprite_id: GenerationalIndex,
}

local SpritePainter = @MakeSystem('SpritePainter', @record{
  position: Comps.Position,
  texture_comp: Comps.TextureComp,
  painter: Comps.Painter,
  sprite: Comps.Sprite
})

global Sys.SpritePainter = @SpritePainter

-- vector of layers, each layer is a vector of the triple of ids to components of each iterated entity
local DrawOrder: type = @vector(vector(EachRunIds))
## SpritePainter.value:add_field('draw_order', DrawOrder.value)

function SpritePainter:run(nene: *Nene)
  ## if PROF then
    nprof:push(#[SpritePainter.value.nickname]#)
    defer nprof:pop() end
  ## end

  defer
    for i = 0, < #self.draw_order do
      self.draw_order[i]:destroy()
    end
    self.draw_order:destroy()
  end

  -- collect ids of the components to iterate
  for i = 0, < #self.system_data.components_indexes do
    local ids = self.system_data.components_indexes[i]

    if #ids > 0 then
      local position_id = ids[0]
      local texture_id = ids[1]
      local painter_id = ids[2]
      local sprite_id = ids[3]

      local position_opt = Irene.storages.position:get_entry(position_id)
      local texture_opt = Irene.storages.texture_comp:get_entry(texture_id)
      local painter_opt = Irene.storages.painter:get_entry(painter_id)
      local sprite_opt = Irene.storages.sprite:get_entry(sprite_id)

      if position_opt.filled and texture_opt.filled and painter_opt.filled and sprite_opt.filled then
        local painter = painter_opt:get()

        if painter.active then
          local sprite = sprite_opt:get()

          if #self.draw_order <= sprite.layer then
            self.draw_order:resize(sprite.layer + 1)
          end

          self.draw_order[sprite.layer]:push({ position_id, texture_id, painter_id, sprite_id })
        end
      else
        self.system_data:mark_available(i)
      end
    end
  end

  for i = 0, < #self.draw_order do
    local current_layer = self.draw_order[i]

    for j = 0, < #current_layer do
      local position_opt = Irene.storages.position:get_entry(current_layer[j].position_id)
      local texture_opt = Irene.storages.texture_comp:get_entry(current_layer[j].texture_id)
      local painter_opt = Irene.storages.painter:get_entry(current_layer[j].painter_id)
      local sprite_opt = Irene.storages.sprite:get_entry(current_layer[j].sprite_id)

      local position = position_opt:get()
      local texture = texture_opt:get()
      local painter = painter_opt:get()
      local sprite = sprite_opt:get()

      local drawpos = position:get_global_position() + sprite.offset

      sprite.spritesheet:draw(nene, drawpos, texture.texture, sprite.current_frame, painter.color)
    end
  end
end

