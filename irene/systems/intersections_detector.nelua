require 'irene.makers'
require 'irene.components.intersectable'
require 'irene.components.intersections'

local Comps, Sys = @Irene.Comps, @Irene.Sys

local IntersectionsDetector = @MakeSystem('IntersectionsDetector', @record{
  intersectable: Comps.Intersectable,
  intersections: Comps.Intersections
})

global Sys.IntersectionsDetector = @IntersectionsDetector

function IntersectionsDetector:run()
  ## if PROF then
    nprof:push(#[IntersectionsDetector.value.nickname]#)
    defer nprof:pop() end
  ## end

  for _, components in self:iterate_components() do
    local intersectable = components.intersectable
    local intersections = components.intersections

    for i = 0, < #Irene.storages.intersectable.generations do
      if Irene.storages.intersectable.generations[i].filled then
        local intersectable_i = &Irene.storages.intersectable.entries[i]

        if intersectable.entity_id ~= intersectable_i.entity_id then
          if intersectable:is_intersecting(intersectable_i) then
            local already_existent = intersections:update_intersection(intersectable:get_intersection(intersectable_i), intersectable_i.mask , intersectable_i.entity_id)

            if not already_existent and intersections.on_enter_callback ~= nilptr then
              intersections.on_enter_callback(intersectable, intersections, intersectable_i)
            end
          else
            local was_existent = intersections:update_no_intersection(intersectable_i.entity_id)

            if was_existent and intersections.on_exit_callback ~= nilptr then
              intersections.on_exit_callback(intersectable, intersections, intersectable_i)
            end
          end
        end
      end
    end
  end
end
