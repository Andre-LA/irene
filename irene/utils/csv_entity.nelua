--[[
  Copyright (c) 2020-present Andr√© Luiz Alvares

  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at https://mozilla.org/MPL/2.0/.

  SPDX-License-Identifier: MPL-2.0
]]

--[ dependencies ]--
-- nelua
require 'iterators'
local string = require 'string'
local hashmap = require 'hashmap'

-- nene
local Vec2 = require 'nene.math.vec2'

--[ CSV Entity ]--
local CsvEntity = @record{
  name: string,
  class_name: string,
  pos: Vec2,
  properties: hashmap(string, string),
}

function CsvEntity.init(name: string, class_name: string, pos: Vec2, properties: hashmap(string, string))
  return CsvEntity{
    name = string.copy(name), 
    class_name = string.copy(class_name),
    =pos, =properties
  }
end

function CsvEntity:destroy()
  self.name:destroy()
  self.class_name:destroy()
  self.pos = {}
  self.properties:destroy()
end

##[[
function CsvEntity.value.pattern(with_captures)
  local pattern = '"([%w%s]+)","([%w%s]+)",(%d+),(%d+),"([%w:%.,_%-]-)"'
  
  if not with_captures then
    pattern = pattern:gsub('%(', ''):gsub('%)', '')
  end

  return pattern
end
]]

function CsvEntity.init_from_string(csv_entry: string): (boolean, CsvEntity, string)
  local ok, captures = string.matchview(csv_entry, #[CsvEntity.value.pattern(true)]#)

  defer captures:destroy() end

  if not ok or #captures < 5 then
    return false, (@CsvEntity)(), "Couldn't match the csv_entry as a entity CSV entry"
  end

  local properties: hashmap(string, string)
  
  for _, properties_captures in string.gmatchview(captures[5], '([%w_]+):([%w%._%-]+),?') do
    if #properties_captures == 2 then
      properties[properties_captures[0]] = properties_captures[1]
    else
      return false, (@CsvEntity)(), "unexpected number of attributes"
    end
  end
  
  local result = CsvEntity.init(
    --[[ name       ]] captures[1],
    --[[ class_name ]] captures[2],
    --[[ pos        ]] { x = tonumber(captures[3]), y = tonumber(captures[4]) },
    --[[ properties ]] properties
  )

  if #result.name == 0 then
    result:destroy()
    return false, (@CsvEntity)(), 'CSV entry contains no name'
  end
  
  if #result.class_name == 0 then
    result:destroy()
    return false, (@CsvEntity)(), 'CSV entry contains no class name'
  end

  return true, result
end

function CsvEntity:has_and_get_number_property(property: string, base: facultative(integer)): (boolean, number)
  local property = self.properties:peek(property)
  if property ~= nilptr then
    return true, tonumber($property, base)
  end
  return false
end

function CsvEntity:has_and_get_integer_property(property: string, base: facultative(integer)): (boolean, integer)
  local property = self.properties:peek(property)
  if property ~= nilptr then
    return true, tointeger($property, base)
  end
  return false
end

return CsvEntity
