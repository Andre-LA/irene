--[ dependencies ]--
-- nelua
local io = require 'io'
local string = require 'string'
local hashmap = require 'hashmap'

-- nene
local NeneTilemap = require 'nene.tilemap'

-- irene


--[ CSV Applier ]--
local csv_applier = @record{}

function csv_applier.csv_to_vector(csv: string): (boolean, vector(uint16), uint16)
  local ok: boolean, result: vector(uint16), line_count: uint16 = true, {}, 0

  for _, captures in string.gmatch(csv, '(%-?%d+)([,\n]?)') do
    if #captures > 1 then
      local n: integer = tointeger(captures[0]) + 1
      if n >= 0 then
        result:push(n)

        if captures[1] == '\n' then
          line_count = line_count + 1
        end
      else
        ok = false
        local msg <close> = string.format("invalid number on CSV: expected value greater or equal than -1, got %d.", n-1)
        warn(msg)
      end
    else
      ok = false
      warn("Something gone wrong on pattern capture of the CSV, the file might contains unexpected content.")
    end
  end

  if unlikely(#result == 0) then
    ok = false
    warn("got 0 values from CSV, are you sure the file contains the expected content?")
  end

  return ok, result, line_count
end

function csv_applier.csv_file_to_vector(csv_filepath: string): (boolean, vector(uint16), uint16, string)
  local file = io.open(csv_filepath)

  if likely(file:isopen()) then
    defer file:close() end

    local file_content <close> = file:read('a')

    local ok, vec, line_count = csv_applier.csv_to_vector(file_content)
    return ok, vec, line_count
  else
    local msg <close> = string.format("CSV file '%s' couldn't be opened.", csv_filepath)
    warn(msg)
    return false, {}, 0, "file not opened"
  end
end

-- return csv_applier
